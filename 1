import os
import time
import asyncio
from datetime import datetime, timedelta
from telegram import Bot
from telegram.error import TelegramError

# Telegram Bot 设置
TELEGRAM_TOKEN = '7698800335:AAEeiykr_tJgyZBUxrb6VhXbpH17FmbyAl4'  # 替换为正确的Bot Token
CHANNEL_ID = '-1002586693525'  # 替换为正确的频道ID
image_folder = './generated_files'  # 存储图片的文件夹

print("程序初始化中...")
print(f"使用的Bot Token: {TELEGRAM_TOKEN}")
print(f"目标频道ID: {CHANNEL_ID}")
print(f"图片文件夹路径: {image_folder}")

# 生成发送消息的文本
def generate_text(amount):
    bonus = float(amount.split()[0]) * 0.30 + float(amount.split()[0])
    return f"Basta dar os parabéns ao utilizador por completar uma encomenda no valor de {amount} e retirar {bonus:.3f}🥳"

# 异步发送消息和图片
async def send_message_and_image(bot, chat_id, amount, image_path):
    text = generate_text(amount)
    
    try:
        await bot.send_message(chat_id=chat_id, text=text)
        with open(image_path, 'rb') as photo:
            await bot.send_photo(chat_id=chat_id, photo=photo)
    except TelegramError as e:
        print(f"发送消息失败：{e}")
        return False
    except FileNotFoundError:
        print(f"文件未找到：{image_path}")
        return False
    except Exception as e:
        print(f"发送过程中发生错误：{e}")
        return False
    return True

# 获取命名规则的图片文件和金额
def get_image_and_amount(file_name):
    try:
        time_part, amount_part = file_name.split('_')[:3], file_name.split('_')[3]
        time_str = f"{time_part[0]}:{time_part[1]}:{time_part[2]}"
        amount = amount_part.split()[0]
        return time_str, amount
    except Exception as e:
        print(f"解析文件名出错：{file_name} 错误：{e}")
        return None, None

# 定时发送消息和图片
async def send_scheduled_messages():
    bot = Bot(token=TELEGRAM_TOKEN)
    
    if not os.path.exists(image_folder):
        os.makedirs(image_folder)
    
    # 解析文件夹下所有文件名，安排发送任务
    image_files = sorted([f for f in os.listdir(image_folder) if f.endswith(('.jpg', '.png'))])
    schedule = []

    for image_file in image_files:
        file_time_str, amount = get_image_and_amount(image_file)
        if file_time_str and amount:
            file_time = datetime.strptime(file_time_str, "%H:%M:%S").replace(
                year=datetime.now().year,
                month=datetime.now().month,
                day=datetime.now().day
            )
            schedule.append((file_time, amount, image_file))

    # 按时间排序
    schedule.sort(key=lambda x: x[0])

    print("开始发送定时消息...")
    for file_time, amount, image_file in schedule:
        current_time = datetime.now()
        wait_time = (file_time - current_time).total_seconds()
        if wait_time > 0:
            await asyncio.sleep(wait_time)
        image_path = os.path.join(image_folder, image_file)
        await send_message_and_image(bot, CHANNEL_ID, amount, image_path)

if __name__ == "__main__":
    try:
        asyncio.run(send_scheduled_messages())
    except KeyboardInterrupt:
        print("\n程序被用户中断")
    except Exception as e:
        print(f"出现错误：{e}")
        print(f"错误类型: {type(e).__name__}")
        print(f"错误详情: {str(e)}")
        print("程序异常终止")
